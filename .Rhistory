# Install Packages
install.packages("igraph")
install.packages("network")
install.packages("sna")
install.packages("visNetwork")
install.packages("ndtv", dependencies=T)
install.packages("RColorBrewer")
install.packages("extrafont")
install.packages("png")
install.packages("animation")
install.packages("maps")
install.packages("geosphere")
# Install Packages
install.packages("igraph")
install.packages("network")
install.packages("sna")
install.packages("visNetwork")
install.packages("ndtv", dependencies=T)
install.packages("RColorBrewer")
install.packages("extrafont")
install.packages("png")
install.packages("animation")
install.packages("maps")
install.packages("geosphere")
library(extrafont)
fonts()
fonts()
loadfonts(device = "win")
fonts()
plot(x=10:1, y=10:1, pch=19, cex=6, main="This is a plot",
col="orange", family="Arial Black" )
library(extrafont)
font_install()
font_install("Calibri")
fonts()
fonts()
library("extrafont", lib.loc="~/R/win-library/3.3")
library("extrafontdb", lib.loc="~/R/win-library/3.3")
detach("package:extrafontdb", unload=TRUE)
fonts()
library("extrafont")
loadfonts(device = "win")
fonts()
plot(x=10:1, y=10:1, pch=19, cex=6, main="This is a plot",
col="orange", family="Arial Black" )
detach("package:extrafont", unload=TRUE)
nodes <- read.csv("Data files/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Data files/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
View(links)
View(nodes)
head(nodes)
head(links)
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
head(nodes)
head(links)
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
links[,3]
links[,-3]
aggregate(links[,3], by = links[,-3], FUN = sum)
links <- aggregate(links[,3], by = links[,-3], FUN = sum)
links
order(links$from, links$to)
links[order(links$from, links$to),]
colnames(links)[4] <- "weight"
rownames(links) <- NULL
links
# Preview the data structure
print(head(nodes))
print(head(links))
# The number of nodes and links is the grain for the two data frames; hence aggregation is needed if rows are not unique
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
# Load data sample 2 (matrix)
nodes2 <- read.csv("./Data files/Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("./Data files/Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
head(nodes2)
head(links2)
# Transfer links2 into a matrix
links2 <- as.matrix(links2)
dim(links2)
dim(nodes2)
# Preview the data structure
head(nodes)
head(links)
# The number of nodes and links is the grain for the two data frames; hence aggregation is needed if rows are not unique
# nrow(nodes); length(unique(nodes$id))
# nrow(links); nrow(unique(links[,c("from", "to")]))
# Preview the data structure
nodes[1:5, ]
links[1:5, ]
# The number of nodes and links is the grain for the two data frames; hence aggregation is needed if rows are not unique
# nrow(nodes); length(unique(nodes$id))
# nrow(links); nrow(unique(links[,c("from", "to")]))
# Preview the data structure
nodes[1:5, ]
links[1:5, ]
# The number of nodes and links is the grain for the two data frames; hence aggregation is needed if rows are not unique
# nrow(nodes); length(unique(nodes$id))
# nrow(links); nrow(unique(links[,c("from", "to")]))
library(igraph)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
class(net) # Check the class
E(net)
V(net)
E(net)$type
V(net)$media
library(dplyr)
# Preview the data structure
glimpse(nodes)
glimpse(links)
# The number of nodes and links is the grain for the two data frames; hence aggregation is needed if rows are not unique
# nrow(nodes); length(unique(nodes$id))
# nrow(links); nrow(unique(links[,c("from", "to")]))
# Load data sample 2 (matrix)
nodes2 <- read.csv("./Data files/Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("./Data files/Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
glimpse(nodes2)
glimpse(links2)
# Preview the data structure
first(nodes, 5)
first(links, 5)
# The number of nodes and links is the grain for the two data frames; hence aggregation is needed if rows are not unique
# nrow(nodes); length(unique(nodes$id))
# nrow(links); nrow(unique(links[,c("from", "to")]))
# Preview the data structure
glimpse(nodes)
glimpse(links)
# The number of nodes and links is the grain for the two data frames; hence aggregation is needed if rows are not unique
# nrow(nodes); length(unique(nodes$id))
# nrow(links); nrow(unique(links[,c("from", "to")]))
plot(net)
plot(net, edge.arrow.size=4, vertex.label=NA)
plot(net, edge.arrow.size=0.4, vertex.label=NA)
plot(net, edge.arrow.size=.4, vertex.label=NA)
net <- simplify(net, remove.multiple = F, remove.loops = T)
plot(net, edge.arrow.size=.4, vertex.label=NA)
plot(net) # Raw graph
net <- simplify(net, remove.multiple = F, remove.loops = T)
plot(net, edge.arrow.size=.4, vertex.label=NA)
net2 <- graph_from_incidence_matrix(links2)
table(V(net2)$type)
net2 <- graph_from_incidence_matrix(links2)
plot(net, edge.arrow.size=.4, edge.curved=.1)
plot(net, edge.arrow.size=.2, edge.color="orange",
vertex.color = "orange", vertex.frame. color="#ffffff",
plot(net, edge.arrow.size=.2, edge.color="orange",
vertex.color = "orange", vertex.frame.color="#ffffff",
vertex.label=V(net)$media, vertex.label.color="black")
plot(net) # Raw graph
net <- simplify(net, remove.multiple = F, remove.loops = T)
# Remove node label and create smaller arrows
plot(net, edge.arrow.size=.4, vertex.label=NA)
# Show two directions with curved edges
plot(net, edge.arrow.size=.4, edge.curved=.1)
# Edge color to light grey, node/border colour to organge, show real names for the nodes
plot(net, edge.arrow.size=.2, edge.color="orange",
vertex.color = "orange", vertex.frame.color="#ffffff",
vertex.label=V(net)$media, vertex.label.color="black")
# Load data sample 2 (matrix)
nodes2 <- read.csv("./Data files/Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("./Data files/Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
head(nodes2)
head(links2)
# Preview the data structure
head(nodes)
head(links)
# The number of nodes and links is the grain for the two data frames; hence aggregation is needed if rows are not unique
# nrow(nodes); length(unique(nodes$id))
# nrow(links); nrow(unique(links[,c("from", "to")]))
plot(net) # Raw graph
net <- simplify(net, remove.multiple = F, remove.loops = T)
# Remove node label and create smaller arrows
plot(net, edge.arrow.size=.4, vertex.label=NA)
# Show two directions with curved edges
plot(net, edge.arrow.size=.4, edge.curved=.1)
# Edge color to light grey, node/border colour to organge, show real names for the nodes
plot(net, edge.arrow.size=.2, edge.color="orange",
vertex.color = "orange", vertex.frame.color="#ffffff",
vertex.label=V(net)$media, vertex.label.color="black")
# Colors based on media type
colrs <- c("gray50", "tomato", "gold")
V(net)$color <- colrs[V(net)$media.type]
# Compute node degrees (#links) and use that to set node size:
deg <- degree(net, mode = "all")
V(net)$size <- deg*3
# Or the audience size value as size:
V(net)$size <- V(net)$audience.size*0.6
# Adjust labels to NA:
V(net)$label <- NA
# Set edge widge based on weight:
E(net)$width <- E(net)$weight/6
# Change the arrow size and edge color:
E(net)$arrow.size <- .2
E(net)$edge.color <- "gray80"
E(net)$width <- 1 + E(net)$weight/12
plot(net)
plot(net, edge.color="orange", vertext.color="gray50")
plot(net, edge.color="orange", vertex.color="gray50")
legend(x=-1.5, y=-1.1, c("Newspaper", "Television","Online News"),
pch=21, col="#777777", pt.bg = colrs, pt.cex = 2, cex = .8,
bty="n", ncol=1)
plot(net)
# Overwrite the attr in the plot:
# plot(net, edge.color="orange", vertex.color="gray50")
# Create a legend to explain
legend(x=-1.5, y=-1.1, c("Newspaper", "Television","Online News"),
pch=21, col="#777777", pt.bg = colrs, pt.cex = 2, cex = .8,
bty="n", ncol=1)
# Semantic networks to plot only the labels
plot(net, vertex.shapes="none", vertex.label=V(net)$media,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85")
# Semantic networks to plot only the labels
plot(net, vertex.shape="none", vertex.label=V(net)$media,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85")
# Install Packages
# install.packages("igraph")
# install.packages("network")
# install.packages("sna")
# install.packages("visNetwork")
# install.packages("ndtv", dependencies=T)
# install.packages("RColorBrewer")
# install.packages("extrafont")
# install.packages("png")
# install.packages("animation")
# install.packages("maps")
# install.packages("geosphere")
library(dplyr)
# Load data sample 1 (data frame)
nodes <- read.csv("Data files/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Data files/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
# Preview the data structure
head(nodes)
head(links)
# The number of nodes and links is the grain for the two data frames; hence aggregation is needed if rows are not unique
# nrow(nodes); length(unique(nodes$id))
# nrow(links); nrow(unique(links[,c("from", "to")]))
# Collapse multiple links of the same type between the same two nodes
# by summing their weights, using aggregate() by "from", "to", & "type":
links <- aggregate(links[,3], by = links[,-3], FUN = sum) # aggregate "weight" by "from", "to", "mention"
links <- links[order(links$from, links$to),]
colnames(links)[4] <- "weight"
rownames(links) <- NULL # Otherwise the ordered index would be the row names by default
# Load data sample 2 (matrix)
nodes2 <- read.csv("./Data files/Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("./Data files/Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
head(nodes2)
head(links2)
# Transfer links2 into a matrix
links2 <- as.matrix(links2)
dim(links2)
dim(nodes2)
# Create a igraph object
library(igraph)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
class(net) # Check the class
E(net)
V(net)
E(net)$type
V(net)$media
net2 <- graph_from_incidence_matrix(links2)
plot(net) # Raw graph
net <- simplify(net, remove.multiple = F, remove.loops = T)
# Remove node label and create smaller arrows
plot(net, edge.arrow.size=.4, vertex.label=NA)
# Show two directions with curved edges
plot(net, edge.arrow.size=.4, edge.curved=.1)
# Edge color to light grey, node/border colour to organge, show real names for the nodes
plot(net, edge.arrow.size=.2, edge.color="orange",
vertex.color = "orange", vertex.frame.color="#ffffff",
vertex.label=V(net)$media, vertex.label.color="black")
# Colors based on media type
colrs <- c("gray50", "tomato", "gold")
V(net)$color <- colrs[V(net)$media.type]
# Compute node degrees (#links) and use that to set node size:
deg <- degree(net, mode = "all")
V(net)$size <- deg*3
# Or the audience size value as size:
V(net)$size <- V(net)$audience.size*0.6
# Adjust labels to NA:
V(net)$label <- NA
# Set edge widge based on weight:
E(net)$width <- E(net)$weight/6
# Change the arrow size and edge color:
E(net)$arrow.size <- .2
E(net)$edge.color <- "gray80"
E(net)$width <- 1 + E(net)$weight/12
plot(net)
# Overwrite the attr in the plot:
# plot(net, edge.color="orange", vertex.color="gray50")
# Create a legend to explain
legend(x=-1.5, y=-1.1, c("Newspaper", "Television","Online News"),
pch=21, col="#777777", pt.bg = colrs, pt.cex = 2, cex = .8,
bty="n", ncol=1)
# Semantic networks to plot only the labels
plot(net, vertex.shape="none", vertex.label=V(net)$media,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85")
